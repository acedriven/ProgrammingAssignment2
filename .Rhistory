exit()
quit()
swirl()
install.packages("swirl")
library(swirl)
swirl()
install.packages("swirl")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
print(my_data)
info()
print(my_data)
print(my_data)
print(my_data)
print(my_data)
print my_data
print(my_data)
info()
skip()
0 / 0
Inf - Inf
exit
quit
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
x <- sys.time()
x <- Sys.time()
x
x + 1
p <- POSIXlt(x)
p <- as.POSIXlt(x)
p
names(p)
unclass(p)
p
names(unclass(p))
p$sec
p$yday
p$isdst
p$zone
p$min
y <- Sys.time()
y
unclass(y)
y$sec
p <- as.POSIXlt(y)
p <- as.POSIXlt(x)
p2 <- as.POSIXlt(y)
p2
p2$sec
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
datestring
z <- strptime(datestring, "%B %d, %Y %H:%M")
z
class(z)
?strptime
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
x-y
x <- as.POSIXlt(x)
x-y
install.packages("swirl")
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar==2, norf=NA)
vect <- c("foo"=11, "bar"=2, "norf"=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(F == T) == F
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5!=7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6!= 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
ints[which(ints>7)]
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(2,4,5)
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","Fun!")
paste("Programming", "is", "fun!")
submit()
telegram("This is a test")
submit()
submit()
submit()
submit()
mad_libs(place = "San Francisco", adjective = "strong", noun = "giraffe")
submit()
info()
info()
submit()
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flgs[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
lapply(flag_colors,mean)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shap_mat <- sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$tandmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
object.size(plants)/1024
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=T)
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replacement=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
play()
rbinom(0,size=100,prob=0.7)
rbinom(1,size=100,prob=0.5)
rbinom(1,size=100,prob=0.5)
rbinom(1,size=100,prob=0.5)
rbinom(1,size=100,prob=0.5)
nxt()
flips2 <- rbinom(c(0,1),100,0.7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
play()
flips3 <- rbinom(n=100,size=100,prob=0.7)
flips3
mean(flips3)
range(flips3)
nxt()
?rnorm
rnorm(10)
play()
sd(rnorm(10))
sd(rnorm(100))
sd(rnorm(1000))
sd(rnorm(1000))
sd(rnorm(1000))
sd(rnorm(10))
sd(rnorm(10))
sd(rnorm(10))
sd(rnorm(10))
nxt()
rnorm(10, mean = 100, sd = 25)
?rpois
rpos(5,10)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unless(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unlcass(t2)
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptim(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot("Speed"=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, x="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance", main="My Plot")
plot(carsmain="My Plot")
plot(cars,main="My Plot")
plot(cars,main="My Plot", sub="My Plot Subittle")
plot(cars, sub="My Plot Subittle")
plot(cars, sub="My Plot Subitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
load(mtcars)
data(mtcars)
head(mtcars)
str(mtcars)
?boxplot
boxplot(formula = mpg~cyl, data=mtcars)
hist(mtcars$mpg)
quit
exit
by()
bye()
exit()
quit()
mat <- matrix(1:9,3,3)
mat
solve(mat)
?solve
source("makeVector.R")
source("makeVector.R")
a <- makeVector(c(1,2,3,4))
a$getmean
a$getmean()
a$cachemean
cachemean
cachemean(s)
cachemean(a)
rm(a)
a <- makeVector(c(1,2,3,4))
a$getmean()
a$get()
a$set()
a$setmean()
cachemean(a)
a$getmean()
a
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$getmean()
a$get()
a$setmean(10)
a$getmean()
a$setmean(0)
a$getmean()
a$get()
cachemean(a)
rm(a)
source("makeVecotr.R")
getwd()
source("makeVector.R")
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
source("cachematrix.R")
setwd("~/GitHub/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
mat <- matrix(1:4,2,2)
mat
test_mat = makeCacheMatrix(mat)
test_mat
makeCacheMatrix(mat)
rm(mat, test_mat)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
amatrix$set()
amatrix$get()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
amatrix$set()
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
traceback()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$set()
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
n <-128
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
time1
time2
rm(mat,time1, time2, matSolved1, matSolved2)
rm(n)
rm(amatrix,matCached)
n <- 128
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
if (time1["user.self"] < time2["user.self"])
message("Solve time is less than cache time")
rm(amatrix,matCached)
rm(n)
rm(mat,time1, time2, matSolved1, matSolved2)
n <- 128
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
mat
View(mat)
View(mat)
matCached <- makeCacheMatrix(mat)
matCached$get()
matCached$getinverse()
cacheSolve(mat)
cacheSolve(matCached)
cacheSolve(matCached)
matcached$getinverse()
catCached$getinverse()
matCached$getinverse()
cacheSolve(matCached)
n <- 12
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
cacheSolve(matCached)
cacheSolve(matCached)
cacheSolve(matCached)
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
if (time1["user.self"] < time2["user.self"])
message("Solve time is less than cache time")
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
if (time1["user.self"] > time2["user.self"])
message("Solve time is less than cache time")
source("cachematrix.R")
n <- 128
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
if (time1["user.self"] > time2["user.self"])
message("Solve time is less than cache time")
source("cachematrix.R")
n <- 128
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
if (time1["user.self"] < time2["user.self"])
message("Solve time is less than cache time")
str(time1)
time1
class(time1)
time2-time1
Q
q
